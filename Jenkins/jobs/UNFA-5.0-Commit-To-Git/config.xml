<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <logRotator class="hudson.tasks.LogRotator">
    <daysToKeep>-1</daysToKeep>
    <numToKeep>100</numToKeep>
    <artifactDaysToKeep>-1</artifactDaysToKeep>
    <artifactNumToKeep>-1</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.4-SNAPSHOT">
      <useBuildBlocker>false</useBuildBlocker>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.TextParameterDefinition>
          <name>TRACKED</name>
          <description>Job name</description>
          <defaultValue></defaultValue>
        </hudson.model.TextParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TRACKED_ID</name>
          <description>Build number</description>
          <defaultValue>(manual)</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.plugins.copyartifact.BuildSelectorParameter plugin="copyartifact@1.30">
          <name>BUILD_SELECTOR</name>
          <description></description>
          <defaultSelector class="hudson.plugins.copyartifact.TriggeredBuildSelector"/>
        </hudson.plugins.copyartifact.BuildSelectorParameter>
        <hudson.model.TextParameterDefinition>
          <name>PACKAGE</name>
          <description>Package name</description>
          <defaultValue></defaultValue>
        </hudson.model.TextParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>COMMIT_MODE</name>
          <description>Valid choices are &apos;auto&apos; and &apos;release&apos;. The &apos;auto&apos; mode will commit and push the change in a branch named &quot;tracker-${PACKAGE}&quot;. The &apos;release&apos; mode will merge the &quot;tracker-${PACKAGE}&quot; branch into the &apos;master&apos; branch.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>auto</string>
              <string>release</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.3">
      <condition class="org.jenkins_ci.plugins.run_condition.core.ExpressionCondition" plugin="run-condition@1.0">
        <expression>UNFA-4.0-Track-.*</expression>
        <label>${TRACKED}</label>
      </condition>
      <buildStep class="hudson.plugins.copyartifact.CopyArtifact" plugin="copyartifact@1.30">
        <project>${TRACKED}</project>
        <filter>jenkins.PKGBUILD</filter>
        <target></target>
        <selector class="hudson.plugins.copyartifact.ParameterizedBuildSelector">
          <parameterName>BUILD_SELECTOR</parameterName>
        </selector>
        <doNotFingerprintArtifacts>false</doNotFingerprintArtifacts>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
    <hudson.plugins.copyartifact.CopyArtifact plugin="copyartifact@1.30">
      <project>UNFA-1.0-Get-Git-Sources</project>
      <filter>snapshot.tar.xz</filter>
      <target></target>
      <selector class="hudson.plugins.copyartifact.StatusBuildSelector"/>
      <doNotFingerprintArtifacts>false</doNotFingerprintArtifacts>
    </hudson.plugins.copyartifact.CopyArtifact>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

set -e

if [ ! -d TEMP/ ]; then
  mkdir TEMP/
fi

cd TEMP/

echo &quot;--------------------------------------------------------------------------------&quot;
echo &quot;Extracting git snapshot from UNFA-1.0-Get-Git-Sources ...&quot;
echo &quot;--------------------------------------------------------------------------------&quot;
tar Jxf ../snapshot.tar.xz

echo

echo &quot;--------------------------------------------------------------------------------&quot;
echo &quot;Setting up git ...&quot;
echo &quot;--------------------------------------------------------------------------------&quot;
NAME=&quot;Jenkins VCS Tracker&quot;
EMAIL=&quot;chenxiaolong@cxl.epac.to&quot;
echo &quot;I am ${NAME}&quot;
echo &quot;My email is ${EMAIL}&quot;

echo

BRANCH=tracker-${PACKAGE}
MASTER=master
#MASTER=testing

echo &quot;--------------------------------------------------------------------------------&quot;
echo &quot;git pull&apos;ing ...&quot;
echo &quot;--------------------------------------------------------------------------------&quot;
git fetch
git checkout ${MASTER}
git pull

echo

if [ &quot;x${COMMIT_MODE}&quot; = &quot;xauto&quot; ]; then
  (git checkout ${BRANCH} || git checkout -b ${BRANCH}) &amp;&gt;/dev/null
  echo &quot;--------------------------------------------------------------------------------&quot;
  echo &quot;Merging &apos;${MASTER}&apos; into &apos;${BRANCH}&apos;&quot;
  echo &quot;--------------------------------------------------------------------------------&quot;
  git merge ${MASTER} || (echo &quot;Please manually merge &apos;${MASTER}&apos; into &apos;${BRANCH}&apos; then rebuild this job with the same parameters.&quot; &amp;&amp; exit 1)

  cd ${PACKAGE}
  cp ../../jenkins.PKGBUILD PKGBUILD
  git add PKGBUILD

  echo

  echo &quot;--------------------------------------------------------------------------------&quot;
  echo &quot;Committing changes ...&quot;
  echo &quot;--------------------------------------------------------------------------------&quot;

  if ! git diff-index --cached --quiet HEAD --ignore-submodules --; then
    #COMMITMSG=&quot;[${PACKAGE}] Jenkins VCS Tracker: New upstream commit&quot;
    COMMITMSG=&quot;[${PACKAGE}] Jenkins autocommit: (job: ${TRACKED}; build no.: ${TRACKED_ID})&quot;
    echo &quot;I am commiting the following to the &apos;${BRANCH}&apos; branch:&quot;
    echo
    git commit -m &quot;${COMMITMSG}&quot;
    git format-patch HEAD~1..HEAD --stdout &gt; ../../jenkins.changes.patch
    echo &quot;********************************************************************************&quot;
    cat ../../jenkins.changes.patch
    echo &quot;********************************************************************************&quot;
  else
    echo &quot;Nothing has changed.&quot;
    touch ../../jenkins.changes.patch
  fi

  # Can&apos;t only track the PKGBUILD. Otherwise, the latest commit won&apos;t include changes to other files.
  COMMIT=$(git log -n 1 --pretty=&apos;%H&apos; .)
  echo &quot;COMMIT=${COMMIT}&quot; &gt; ../../commit.prop
elif [ &quot;x${COMMIT_MODE}&quot; = &quot;xrelease&quot; ]; then
  echo &quot;--------------------------------------------------------------------------------&quot;
  echo &quot;Merging &apos;${BRANCH}&apos; into &apos;${MASTER}&apos;&quot;
  echo &quot;--------------------------------------------------------------------------------&quot;
  git checkout ${BRANCH}
  git checkout ${MASTER}
  git merge ${BRANCH}
else
  echo &quot;UNKNOWN MODE: ${COMMIT_MODE}&quot;
  exit 1
fi



echo

echo &quot;--------------------------------------------------------------------------------&quot;
echo &quot;git push&apos;ing ...&quot;
echo &quot;--------------------------------------------------------------------------------&quot;
git push -u origin ${BRANCH}
git push -u origin ${MASTER}</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <org.jenkins__ci.plugins.flexible__publish.FlexiblePublisher plugin="flexible-publish@0.12">
      <publishers>
        <org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
          <condition class="org.jenkins_ci.plugins.run_condition.logic.And" plugin="run-condition@1.0">
            <conditions>
              <org.jenkins__ci.plugins.run__condition.logic.ConditionContainer>
                <condition class="org.jenkins_ci.plugins.run_condition.core.StatusCondition">
                  <worstResult>
                    <name>SUCCESS</name>
                    <ordinal>0</ordinal>
                    <color>BLUE</color>
                    <completeBuild>true</completeBuild>
                  </worstResult>
                  <bestResult>
                    <name>SUCCESS</name>
                    <ordinal>0</ordinal>
                    <color>BLUE</color>
                    <completeBuild>true</completeBuild>
                  </bestResult>
                </condition>
              </org.jenkins__ci.plugins.run__condition.logic.ConditionContainer>
              <org.jenkins__ci.plugins.run__condition.logic.ConditionContainer>
                <condition class="org.jenkins_ci.plugins.run_condition.core.StringsMatchCondition">
                  <arg1>${COMMIT_MODE}</arg1>
                  <arg2>auto</arg2>
                  <ignoreCase>false</ignoreCase>
                </condition>
              </org.jenkins__ci.plugins.run__condition.logic.ConditionContainer>
            </conditions>
          </condition>
          <publisher class="hudson.tasks.ArtifactArchiver">
            <artifacts>jenkins.changes.patch</artifacts>
            <latestOnly>false</latestOnly>
            <allowEmptyArchive>false</allowEmptyArchive>
          </publisher>
          <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
        </org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
        <org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
          <condition class="org.jenkins_ci.plugins.run_condition.logic.And" plugin="run-condition@1.0">
            <conditions>
              <org.jenkins__ci.plugins.run__condition.logic.ConditionContainer>
                <condition class="org.jenkins_ci.plugins.run_condition.core.StatusCondition">
                  <worstResult>
                    <name>SUCCESS</name>
                    <ordinal>0</ordinal>
                    <color>BLUE</color>
                    <completeBuild>true</completeBuild>
                  </worstResult>
                  <bestResult>
                    <name>SUCCESS</name>
                    <ordinal>0</ordinal>
                    <color>BLUE</color>
                    <completeBuild>true</completeBuild>
                  </bestResult>
                </condition>
              </org.jenkins__ci.plugins.run__condition.logic.ConditionContainer>
              <org.jenkins__ci.plugins.run__condition.logic.ConditionContainer>
                <condition class="org.jenkins_ci.plugins.run_condition.core.StringsMatchCondition">
                  <arg1>${COMMIT_MODE}</arg1>
                  <arg2>auto</arg2>
                  <ignoreCase>false</ignoreCase>
                </condition>
              </org.jenkins__ci.plugins.run__condition.logic.ConditionContainer>
            </conditions>
          </condition>
          <publisher class="hudson.plugins.parameterizedtrigger.TriggerBuilder" plugin="parameterized-trigger@2.24">
            <configs>
              <hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
                <configs>
                  <hudson.plugins.parameterizedtrigger.FileBuildParameters>
                    <propertiesFile>commit.prop</propertiesFile>
                    <failTriggerOnMissing>false</failTriggerOnMissing>
                    <useMatrixChild>false</useMatrixChild>
                    <onlyExactRuns>false</onlyExactRuns>
                  </hudson.plugins.parameterizedtrigger.FileBuildParameters>
                  <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
                    <properties>BUILD_SOURCE=autocommit</properties>
                  </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
                </configs>
                <projects>UNFA-2.0-Build-${PACKAGE}</projects>
                <condition>ALWAYS</condition>
                <triggerWithNoParameters>false</triggerWithNoParameters>
                <buildAllNodesWithLabel>false</buildAllNodesWithLabel>
              </hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
            </configs>
          </publisher>
          <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
        </org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
      </publishers>
    </org.jenkins__ci.plugins.flexible__publish.FlexiblePublisher>
    <hudson.plugins.ws__cleanup.WsCleanup plugin="ws-cleanup@0.20">
      <deleteDirs>false</deleteDirs>
      <skipWhenFailed>false</skipWhenFailed>
      <cleanWhenSuccess>true</cleanWhenSuccess>
      <cleanWhenUnstable>true</cleanWhenUnstable>
      <cleanWhenFailure>true</cleanWhenFailure>
      <cleanWhenNotBuilt>true</cleanWhenNotBuilt>
      <cleanWhenAborted>true</cleanWhenAborted>
      <notFailBuild>false</notFailBuild>
      <cleanupMatrixParent>false</cleanupMatrixParent>
    </hudson.plugins.ws__cleanup.WsCleanup>
  </publishers>
  <buildWrappers/>
</project>